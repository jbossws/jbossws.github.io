<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-07-08T02:12:31+00:00</updated><id>/feed.xml</id><title type="html">JBossWS</title><entry><title type="html">Part 2, Designing a Testing Framework</title><link href="/2023/06/23/webservices-cloud-testing-p2/" rel="alternate" type="text/html" title="Part 2, Designing a Testing Framework" /><published>2023-06-23T00:00:00+00:00</published><updated>2023-06-23T00:00:00+00:00</updated><id>/2023/06/23/webservices-cloud-testing-p2</id><content type="html" xml:base="/2023/06/23/webservices-cloud-testing-p2/"><![CDATA[<p>This is the second article in a series about the web services team’s
exploration of technologies and strategies for running RESTEasy and JBossws-cxf integration tests in a cloud environment.
<a href="https://jbossws.github.io/2023/06/16/webservices-cloud-testing-p1/">Part 1</a> describes the scope of this project.
This article investigates designing a testing framework based on maven.</p>

<p>One of the project objectives is to use maven to generate the testable components and run the tests.  For this initial evaluation there are two test components, an image file containing a web service WAR running in Wildfly and a junit test class that runs outside the image file.  Future test cases will be more complex consisting of several web service images and a single test class.</p>

<p>In proto-typing the testing framework an exiting simple arquillian based web service integration test will be migrated to this framework.  The complexity of the required modifications will be noted.  In my opinion the fewer the modifications the better.  I have considered creating a mock-arquillian archive that would allow the arquillian classes referenced in the exiting test class to be ignored.  This would allow the test class to remain unaltered and useable in both arquillian and the cloud test frameworks.  But it does not seem like a good idea for test clarity and long term code maintenance, so I will be making edits to the test class.</p>

<p>As noted in part one, I think the framework should support testing both development and released versions of Wildfly. There are 2 strategies that can be used to build the image file.  One is to use a Wildfly image provided in quary.io/wildfly and add the web service
WAR to it; creating a new image.  Two, is to generate a version of wildfly on local 
 disk.  Add the WAR file to it.  Use a base docker image and add the wildfly build to that; creating a new image.
In both test image building strategies the web service WAR file must be 
available when building the image.  With arquillian the WAR file is defined within the test class.  It is generated and deployed when the test class runs.  In this image building process the maven-war-plugin is used to generate the WAR file.  The corresponding code is removed from the test class.  Generating the WAR file in this manner also means every test must exist in its own project module.</p>

<p>In addressing the second strategy, generating a version of wildfly on local
disk, org.wildfly.plugins:wildfly-maven-plugin is used to generate Wildfly from a Wildfly feature pack.  To that, the WAR file is copied into wildfly’s standalone/deployment directory by the plugin. The wildfly-maven-plugin has been enhanced to run Wildfly CLI-scripts.  A feature future web service cloud tests will need but is not required for this simple test case.  I find having the Wildfly code that is used in the image available locally helpful.  It makes it easy to debug any server issue with the test.</p>

<p>For both strategies io.fabric8:docker-maven-plugin is used to generate a docker image from a Dockerfile provided in the project.  docker-maven-plugin is a versatile plugin with many features and options for generating Docker images and configurating the image’s run parameters.  This plugin can be used for testing.  It can start the image in Docker, run the test, stop the Docker instance and cleanup after the test.   However a more complex test case should be created to futher evaluate the capabilies of this plugin to meet the needs of our future test cases.</p>

<p>The plugin recommended using the maven-failsafe-plugin instead of maven-surefire-plugin in running the integration test because on test failure maven-failsafe-plugin will clean up the Docker process and maven-surefire-plugin will not.  I encountered an issue using maven-failsafe-plugin in place of maven-surefire-plugin.  maven-surefire-plugin runs as a default build process.  In order to enable maven-failsafe-plugin to run I had to disable the running of surefire by excluding the test class in the plugin and including the test class in the maven-failsafe-plugin.  Also maven-failsafe-plugin requires test method names to either start or end with “IT”, so the test class had to be adjusted accordingly.
While editing the test class I also removed the references to arquillian annotations, RunAsClient and Deployment, and junit annotation RunWith.</p>

<p>A key objective of the testing framework is to be able to run the test suite on any Kuberneties compliant implementation.  io.fabric8:docker-maven-plugin does not appear to provide that versatility.  It deploys images to Docker only. However I have not found any other plugin that can deploy to any Kuberneties implementation either.</p>

<p>Lets review the pros and cons of this framework</p>

<p>Pros</p>
<ul>
  <li>The test can be built and run via maven.</li>
  <li>The test class does not need extensive editing.</li>
</ul>

<p>Cons</p>
<ul>
  <li>Each test will required its own project module because a WAR file must be created.</li>
  <li>There will be a lot of duplicate boilerplate code in the pom files.</li>
  <li>The test class requires some edits.</li>
  <li>There is no generic support for deploying the tests to any Kuberneties implementation.</li>
</ul>

<p>Source code for this proto-type project can be found <a href="https://github.com/rsearls/blog-posts/tree/master/blog-mvn-wfly-plugin">here.</a></p>]]></content><author><name>Rebecca Searls</name></author><summary type="html"><![CDATA[This is the second article in a series about the web services team’s exploration of technologies and strategies for running RESTEasy and JBossws-cxf integration tests in a cloud environment. Part 1 describes the scope of this project. This article investigates designing a testing framework based on maven.]]></summary></entry><entry><title type="html">Web Services Testing In The Cloud Part 1</title><link href="/2023/06/16/webservices-cloud-testing-p1/" rel="alternate" type="text/html" title="Web Services Testing In The Cloud Part 1" /><published>2023-06-16T00:00:00+00:00</published><updated>2023-06-16T00:00:00+00:00</updated><id>/2023/06/16/webservices-cloud-testing-p1</id><content type="html" xml:base="/2023/06/16/webservices-cloud-testing-p1/"><![CDATA[<p>The web services team is embarking on an exploration of technologies and strategies
for running RESTEasy and JBossws-cxf integration tests in a cloud environment.
A series of blogs will follow that discuss the technologies
evaluated and strategies tried in this quest.</p>

<p>It is the team’s desire to use a framework that adheres to the Java maxim,
“Write once. Run anywhere”.  In this case, write the tests once and run them on
any Kubernetes based cloud environment.
I would add to that, the goal of leveraging what we can of the existing test
class format.  The web services integration test suites uses Arquillian
which provides a means for the test class itself to contain the definition of the
web service WAR file that is deployed and the client code used to call the service.
I find it a convenience to have both key components co-located in a single file.
My colleagues disagree with this goal.
In the cloud paradigm a testable image is created in a separate pre-test build step.
The WAR file would need to be available at that time in order to be
incorporated into the testing image.  It is my colleagues opinion our test
suites should follow this cloud convention.</p>

<p>It is desirable to continue using maven and maven plugins to build the test images 
and run the test suites.  Maven has been the dominant build tool of RedHat projects
for years.  We want to continue using it for this work.</p>

<p>At this time there are two environments in which we must be able to run the
test suite, one on our local machines for development purposes and two in the CIs we use.  This means running minikube and/or OpenShift on our personal machines.  Both RESTEasy
and JBossws-cxf use git’s CI for testing.  It is yet to be determined what cloud
products git CI can run.  Jenkins supports testing in cloud environments but our team does
not currently use it.</p>

<p>Wildfly will be the server used in a testable image.  In my opinion the test suite
should support generation of testable images of both development versions of Wildfly and
released versions.  The Wildfly team pushes images of released versions
of Wildfly to the quary.io repository.  An extra build step will be needed to generate an image containing a development version of Wildfly.</p>

<p>Another issue under discussion is do we write only new tests or leverage
some or all the existing tests.  There is agreement that new tests need
to be written.  There are unique cloud based scenarios that should be
tested.  There is still an open discussion about testing any of the existing
integration tests in the cloud.  There is also a discussion whether the suite
of tests should reside in a separate project or in a new module within the existing projects.  I think the test suite location
will be determined once we have a better understanding of the framework(s)
for building and running the tests in the required environments.</p>

<p>These are the general parameters the team is using in evaluating technologies and strategies in writing and running web services tests in the cloud.  The coming blogs
will discuss what we are learning and the decisions made for our implementation.</p>

<p><a href="https://jbossws.github.io/2023/06/23/webservices-cloud-testing-p2/">Part 2:</a> Designing a Testing Framework</p>]]></content><author><name>Rebecca Searls</name></author><summary type="html"><![CDATA[The web services team is embarking on an exploration of technologies and strategies for running RESTEasy and JBossws-cxf integration tests in a cloud environment. A series of blogs will follow that discuss the technologies evaluated and strategies tried in this quest.]]></summary></entry><entry><title type="html">JBossWS Galleon Feature Pack</title><link href="/2023/04/18/jbossws-cxf-galleon-feature-pack/" rel="alternate" type="text/html" title="JBossWS Galleon Feature Pack" /><published>2023-04-18T00:00:00+00:00</published><updated>2023-04-18T00:00:00+00:00</updated><id>/2023/04/18/jbossws-cxf-galleon-feature-pack</id><content type="html" xml:base="/2023/04/18/jbossws-cxf-galleon-feature-pack/"><![CDATA[<p>The WildFly Galleon project is designed to allow users to install, uninstall, and patch products with a high degree of 
customization. By defining an XML, CLI, or Maven plugin, users can slim down the WildFly server and select the subsystems 
they want to install to run their application. For example, if a user’s application only requires JAX-RS, JPA, and 
Servlets and does not need EJB or JMS, the Galleon tool can help install a customized version of WildFly or EAP that 
only contains JAX-RS, JPA, Undertow, and other required dependent subsystems. Behind the WildFly Galleon technology, 
a feature pack provides the unit of WildFly that can be installed or uninstalled using Galleon tools. 
A feature pack is zipped and deployed to the Maven repository, and the Galleon tool can consume 
the feature pack as user-defined to install these units. 
In this post, we will discuss the new JBossWS CXF feature pack in the upcoming 6.3.0 release and how we can use this 
feature pack to install the new JBossWS CXF version to a WildFly server.</p>

<h4 id="jbossws-cxf-feature-pack">JBossWS CXF Feature Pack</h4>

<p>The JBossWS CXF feature pack contains all JBossWS packages to install in a WildFly server. All JBossWS related JBoss 
modules will be created or updated. With this JBossWS feature pack, the JBossWS version can be updated to 
the version in this feature pack. The JBossWS feature pack depends on the wildfly-ee-galleon-pack’s latest version. 
When the JBossWS-CXF feature pack is installed, the  wildfly-ee-galleon-pack will be installed before the
JBossWS CXF feature pack.</p>

<h4 id="install-jbossws-cxf-feature-pack-with-cli">Install JBossWS-CXF Feature Pack With CLI</h4>

<p>Galleon provides a CLI tool to install and customize the WildFly installation. Simply download the latest version of
<a href="https://github.com/wildfly/galleon/tree/5.1.0.Final">Galleon 5.1.0.Final</a>, unzip it, and the Galleon CLI tool is 
ready for use. Then, we can install the JBossWS CXF feature pack with this command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>path/to/galleon-5.1.0.Final/bin/galleon.sh  install org.jboss.ws.cxf:jbossws-cxf-feature-pack:6.3.1-SNAPSHOT --dir=path/to/installation
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">galleon.sh install</code> can be run with <code class="language-plaintext highlighter-rouge">--layers</code> flag to define the subsystems you want to install. For more details,
please check <a href="https://docs.wildfly.org/27/Galleon_Guide.html">Galleon guide</a>.</p>

<p>Please note that Galleon requires Java 11 for runtime, and you should make sure that JDK11 or a higher version is set up properly.</p>

<h4 id="install-jbossws-cxf-feature-pack-with-maven">Install JBossWS CXF Feature Pack with Maven</h4>

<p>Another way to install the JBossWS-CXF feature pack is by using Maven. The <code class="language-plaintext highlighter-rouge">provision</code> goal in wildfly-maven-plugin installs the 
WildFly server in the Maven build. Here is an example to install the JBossWS CXF feature pack and provide only the features and packages 
included in the in <code class="language-plaintext highlighter-rouge">cloud-server</code> and <code class="language-plaintext highlighter-rouge">webservices</code> layers:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;wildfly-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;4.1.0.Beta5&lt;/version&gt;
                &lt;configuration&gt;

                    &lt;feature-packs&gt;
                        &lt;feature-pack&gt;
                            &lt;location&gt;org.wildfly:wildfly-galleon-pack:27.0.1.Final&lt;/location&gt;
                        &lt;/feature-pack&gt;
                        &lt;feature-pack&gt;
                            &lt;location&gt;org.jboss.ws.cxf:jbossws-cxf-feature-pack:6.2.1-SNAPSHOT&lt;/location&gt;
                            &lt;inherit-packages&gt;true&lt;/inherit-packages&gt;
                        &lt;/feature-pack&gt;
                    &lt;/feature-packs&gt;
                    &lt;layers&gt;
                        &lt;layer&gt;cloud-server&lt;/layer&gt;
                        &lt;layer&gt;webservices&lt;/layer&gt;
                    &lt;/layers&gt;
                &lt;/configuration&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;provision&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">wildfly-maven-plugin</code>’s <code class="language-plaintext highlighter-rouge">provision</code> goal offers a lot of flexibility to Maven projects for 
testing with the WFLY server and updating specific units within it. In the JBossWS project, this plugin 
is currently being utilized to build a customized version of the WildFly server. This new server is 
then used to execute all tests with the latest JBossWS CXF version installed, ensuring a reliable 
and up-to-date testing environment.</p>

<h4 id="summary">Summary</h4>

<p>Galleon is a good tool for reducing the size of the WildFly server distribution. When install with the 
jbossws-cxf-feature pack, it simplifies the process of replacing and updating the JBossWS unit in WildFly. 
If you’re looking to remove specific subsystems or units from your WildFly distribution and install a new 
version of the WildFly unit, it’s best to avoid doing it manually. Instead, make use of Galleon or the 
wildfly-maven-plugin to ensure an efficient process.</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[The WildFly Galleon project is designed to allow users to install, uninstall, and patch products with a high degree of customization. By defining an XML, CLI, or Maven plugin, users can slim down the WildFly server and select the subsystems they want to install to run their application. For example, if a user’s application only requires JAX-RS, JPA, and Servlets and does not need EJB or JMS, the Galleon tool can help install a customized version of WildFly or EAP that only contains JAX-RS, JPA, Undertow, and other required dependent subsystems. Behind the WildFly Galleon technology, a feature pack provides the unit of WildFly that can be installed or uninstalled using Galleon tools. A feature pack is zipped and deployed to the Maven repository, and the Galleon tool can consume the feature pack as user-defined to install these units. In this post, we will discuss the new JBossWS CXF feature pack in the upcoming 6.3.0 release and how we can use this feature pack to install the new JBossWS CXF version to a WildFly server.]]></summary></entry><entry><title type="html">What’s New in the Upcoming JBossWS 6.3.0 Release</title><link href="/2023/04/17/what-is-new-in-jbossws-cxf-630final/" rel="alternate" type="text/html" title="What’s New in the Upcoming JBossWS 6.3.0 Release" /><published>2023-04-17T00:00:00+00:00</published><updated>2023-04-17T00:00:00+00:00</updated><id>/2023/04/17/what-is-new-in-jbossws-cxf-630final</id><content type="html" xml:base="/2023/04/17/what-is-new-in-jbossws-cxf-630final/"><![CDATA[<p>After JBossWS 6.2.0 released, we are thinking about what we should do to improve JBossWS 
project and add new things in the upcoming JBossWS 6.3.0 release. In this blog post,
we will discuss this topic and give an update what will be included in the new release.</p>

<ol>
  <li>
    <p>JBossWS Galleon Feature Pack</p>

    <p><a href="https://docs.wildfly.org/galleon">WildFly Galleon</a> allows users to create custom distributions of 
the WildFly application server. It uses feature pack to specify a set of components to include in 
the custom Wildfly server. 
In JBossWS 6.3.0, the new jbossws-cxf-feature-pack will be provided. User can install this feature
pack in any of released WildFly 27 and WildFly 28 or 28-SNAPSHOT version. This feature pack will be
included in JBossWS dist module and create the custom WildFly server to run whole test suite.</p>
  </li>
  <li>
    <p>Cloud Support</p>

    <p>Containerized java application can be the first step to easily deploy to the cloud and scale up 
or down based on demand. In the next JBossWS release, we’ll improve JBossWS cloud support and create 
examples/docs about how to run a webservice endpoint in docker container. 
The Openshift platform provides numerous benefits for running applications like scalability,high 
availability,resource efficiency, rollout and rollback. To allow user to easily deploy webservice 
application to the Openshift, we’ll provide better support and guidance to run webservice on OpenShift.</p>
  </li>
  <li>
    <p>Clean build</p>

    <p>In the previous JBossWS releases, we have to use many arguments and maven profiles to run all jbossws
tests and build all artifacts. This will be cleaned and improved in the upcoming 6.3.0 release. We’ll 
deprecate the old maven profiles and make JBossWS buildable with the simple maven build command line
<code class="language-plaintext highlighter-rouge">mvn clean install</code>.</p>
  </li>
  <li>
    <p>More Jakarta EE support</p>

    <p>From JBossWS 6.x, we already changed the javax package name to jakarta and imported the new jakarta 
dependencies. For the third party dependencies, we’ll update as many jakarta dependency as we can, 
with particular focus on CXF 4.0.1.</p>
  </li>
</ol>

<p>This is a preliminary version for our project roadmap. It is subject to change as we continue to look at what else 
we can bring in the next release. We welcome your comments and would appreciate any feedback you have. Please leave us 
a message on <a href="https://github.com/jbossws/jbossws-cxf/discussions">github discussion</a>.</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[After JBossWS 6.2.0 released, we are thinking about what we should do to improve JBossWS project and add new things in the upcoming JBossWS 6.3.0 release. In this blog post, we will discuss this topic and give an update what will be included in the new release.]]></summary></entry><entry><title type="html">JBossWS 6.2.0.Final is released !</title><link href="/2023/02/14/jbossws-620final-is-released/" rel="alternate" type="text/html" title="JBossWS 6.2.0.Final is released !" /><published>2023-02-14T00:00:00+00:00</published><updated>2023-02-14T00:00:00+00:00</updated><id>/2023/02/14/jbossws-620final-is-released</id><content type="html" xml:base="/2023/02/14/jbossws-620final-is-released/"><![CDATA[<p>JBossWS 6.2.0.Final is now available for download. In this release, we upgraded the CXF to the latest
4.0.0 release and cleaned up dependencies to run the testsuite against WildFly. In this release, we 
improved the maven pom to use the less environment parameter and profile to build and test.
For more detailed info and full list of issues resolved, please check
<a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12396048">release notes.</a></p>

<p>This minor release will be included in WFLY upstream and released in WFLY 28 Beta1.
Please contact us if you get any issue when try with this release. Thanks!</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[JBossWS 6.2.0.Final is now available for download. In this release, we upgraded the CXF to the latest 4.0.0 release and cleaned up dependencies to run the testsuite against WildFly. In this release, we improved the maven pom to use the less environment parameter and profile to build and test. For more detailed info and full list of issues resolved, please check release notes.]]></summary></entry><entry><title type="html">Testsuite Transitioned to WildFly CLI scripts</title><link href="/2022/09/28/Testsuite-Transitioned-to-Wildfly-CLI-scripts/" rel="alternate" type="text/html" title="Testsuite Transitioned to WildFly CLI scripts" /><published>2022-09-28T00:00:00+00:00</published><updated>2022-09-28T00:00:00+00:00</updated><id>/2022/09/28/Testsuite-Transitioned-to-Wildfly-CLI-scripts</id><content type="html" xml:base="/2022/09/28/Testsuite-Transitioned-to-Wildfly-CLI-scripts/"><![CDATA[<p>Starting with jbossws-cxf version 6.1.0.Final the testsuite has been
transitioned from using <a href="https://groovy-lang.org/">Groovy</a> scripts to configure the WildFly server
to using <a href="https://docs.wildfly.org/26/Admin_Guide.html#Command_Line_Interface">WildFly’s CLI</a> scripts.</p>

<p>WildFly’s configuration files, standalone-*.xml, are XML based.  Before
the advancements made in CLI scripting, it was more effective to automate
configuration file changes using tools that provided DOM processing utilities.
Groovy was chosen for that task.  But now with a facility in
<em>org.wildfly.plugins:wildfly-maven-plugin</em> to execute CLI script files, it is
more efficient use CLI scripts.</p>

<p>If you have any issue or question, please let us know. Thanks!</p>]]></content><author><name>Rebecca Searls</name></author><summary type="html"><![CDATA[Starting with jbossws-cxf version 6.1.0.Final the testsuite has been transitioned from using Groovy scripts to configure the WildFly server to using WildFly’s CLI scripts.]]></summary></entry><entry><title type="html">JBossWS 6.1.0.Final is released !</title><link href="/2022/09/07/jbossws-610final-is-released/" rel="alternate" type="text/html" title="JBossWS 6.1.0.Final is released !" /><published>2022-09-07T00:00:00+00:00</published><updated>2022-09-07T00:00:00+00:00</updated><id>/2022/09/07/jbossws-610final-is-released</id><content type="html" xml:base="/2022/09/07/jbossws-610final-is-released/"><![CDATA[<p>JBossWS 6.1.0.Final has been released and is available for download. In this minor release,
we cleaned up dependencies and fixed couple of issues we found.<br />
For more detailed info and full list of issues resolved, please check
<a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12390713">release notes.</a></p>

<p>This minor release has been included in WFLY upstream and will be released in WFLY 27 final.
If you are using JBossWS 6.0.0.Final, please upgrade to this new release. Please contact us if 
you get any issue in this new release. Thanks!</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[JBossWS 6.1.0.Final has been released and is available for download. In this minor release, we cleaned up dependencies and fixed couple of issues we found. For more detailed info and full list of issues resolved, please check release notes.]]></summary></entry><entry><title type="html">JBossWS 6.0.0.Final is released !</title><link href="/2022/06/21/jbossws-600final-is-released/" rel="alternate" type="text/html" title="JBossWS 6.0.0.Final is released !" /><published>2022-06-21T00:00:00+00:00</published><updated>2022-06-21T00:00:00+00:00</updated><id>/2022/06/21/jbossws-600final-is-released</id><content type="html" xml:base="/2022/06/21/jbossws-600final-is-released/"><![CDATA[<p>JBossWS 6.0.0.Final has been released and is available for download. In this major release,
the Jakarta EE 9.1(jakarta namespace aka big bang change) is supported and a lot of
jakarta maven artifacts are included/updated. <br />
For more detailed info and full list of issues resolved, please check
<a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12379843">release notes.</a></p>

<p>We now changed the main branch to 6.x as our development branch and created jbossws-cxf-5.6.x branch to maintain 
the javax(Jakarta EE8) namespace future release. For our community developer, please select the base branch to 
create the pull request. If there is any bug fix, we would like to apply this change to both main and javax branches.</p>

<p>If you happen to migrate to jakarta namespace and  use jbossws-cxf, please upgrade to 6.0.0.Final release. 
If you have any issue or question, please let us know. Thanks!</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[JBossWS 6.0.0.Final has been released and is available for download. In this major release, the Jakarta EE 9.1(jakarta namespace aka big bang change) is supported and a lot of jakarta maven artifacts are included/updated. For more detailed info and full list of issues resolved, please check release notes.]]></summary></entry><entry><title type="html">JBossWS 5.5.0.Final is released !</title><link href="/2022/01/13/jbossws-550final-is-released/" rel="alternate" type="text/html" title="JBossWS 5.5.0.Final is released !" /><published>2022-01-13T00:00:00+00:00</published><updated>2022-01-13T00:00:00+00:00</updated><id>/2022/01/13/jbossws-550final-is-released</id><content type="html" xml:base="/2022/01/13/jbossws-550final-is-released/"><![CDATA[<p>JBossWS 5.5.0.Final has been released and is available for download. 
The maven artifacts have been released to the Maven repository. In this release, we upgraded CXF 
to 3.4.5 ,log4j to 2.17.1 and fixed other issues. For more detailed info and full list of issues resolved, please check
<a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12357605">release notes.</a></p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[JBossWS 5.5.0.Final has been released and is available for download. The maven artifacts have been released to the Maven repository. In this release, we upgraded CXF to 3.4.5 ,log4j to 2.17.1 and fixed other issues. For more detailed info and full list of issues resolved, please check release notes.]]></summary></entry><entry><title type="html">Log4j CVE and JBossWS project</title><link href="/2022/01/06/jbossws-log4j-cve/" rel="alternate" type="text/html" title="Log4j CVE and JBossWS project" /><published>2022-01-06T00:00:00+00:00</published><updated>2022-01-06T00:00:00+00:00</updated><id>/2022/01/06/jbossws-log4j-cve</id><content type="html" xml:base="/2022/01/06/jbossws-log4j-cve/"><![CDATA[<p>After <a href="https://logging.apache.org/log4j/2.x/security.html">log4j cve issues</a> were reported, we carefully
reviewed the usage in JBossWS projects and found we only use log4j dependencies in command line tools, client side
and testsuite. These are places we use log4j dependency:</p>

<ul>
  <li>
    <p><a href="https://github.com/jbossws/jbossws-common-tools/blob/jbossws-common-tools-1.3.2.Final">jbossws-common-tools</a></p>

    <p>It is used to log debug and error messages when running the wsconsume or wsprovide command line tools.
Because these tools only run on the command line and do not run in the JavaEE/Jakarta EE container
server, this CVE issue doesn’t impact the jbossws projects, however
we reviewed the log4j usage in the command line tool and decided to remove this log4j 1.2.14 dependency in 
jbossws-common-tools 1.4.0.Final to 
directly log message to console or use jdk logger.</p>
  </li>
  <li>
    <p><a href="https://github.com/jbossws/jbossws-cxf/tree/main/modules/testsuite">testsuite</a></p>

    <p>This is only for print some log message from our tests. These testsuite maven module won’t be included in 
runtime or used by other projects, so we are safe.</p>
  </li>
  <li>
    <p><a href="https://github.com/jbossws/jbossws-cxf/tree/main/modules/client">client</a> and <a href="https://github.com/jbossws/jbossws-cxf/tree/main/modules/jaspi">jaspi</a> modules</p>

    <p>The log4j is again used to print information for client side like what jbossws-common-tools does, and this CVE issue doesn’t impact 
the client stuff either. To make sure other project including either of this two dependencies doesn’t include the 
old version log4j we upgraded log4j version to 2.17.1 and released jbossws-cxf-5.5.0.Final. In the near future, we’ll
evaluate if it’s possible to remove log4j dependency to directly use jboss logger.</p>
  </li>
</ul>

<p>From above log4j usage in jbossws, if your project has dependency or transitive dependencies to any of these follow projects
please upgrade to jbossws-cxf-5.5.0.Final or jbossws-common-tools-1.4.0.Final. If you find any issue in this upgrade, please 
let us know.</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[After log4j cve issues were reported, we carefully reviewed the usage in JBossWS projects and found we only use log4j dependencies in command line tools, client side and testsuite. These are places we use log4j dependency:]]></summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-10-12T17:17:48+00:00</updated><id>/feed.xml</id><title type="html">JBossWS</title><entry><title type="html">JBossWS 7.3.5.Final is released!</title><link href="/2025/10/11/jbossws-735-release/" rel="alternate" type="text/html" title="JBossWS 7.3.5.Final is released!" /><published>2025-10-11T00:00:00+00:00</published><updated>2025-10-11T00:00:00+00:00</updated><id>/2025/10/11/jbossws-735-release</id><content type="html" xml:base="/2025/10/11/jbossws-735-release/"><![CDATA[<p>JBossWS-CXF 7.3.5.Final has been released. In this bugfix release we fixed regression of Apache CXF’s SoapInterceptor.getUnderstoodHeaders() overriden methods.
For complete issue list, please check the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12468356">Release Notes</a>.</p>

<p>Please try out this release, and let us know if you have any issues or questions.</p>]]></content><author><name>Richard Opalka</name></author><summary type="html"><![CDATA[JBossWS-CXF 7.3.5.Final has been released. In this bugfix release we fixed regression of Apache CXF’s SoapInterceptor.getUnderstoodHeaders() overriden methods. For complete issue list, please check the Release Notes.]]></summary></entry><entry><title type="html">JBossWS 7.3.4.Final is released!</title><link href="/2025/09/12/jbossws-734-release/" rel="alternate" type="text/html" title="JBossWS 7.3.4.Final is released!" /><published>2025-09-12T00:00:00+00:00</published><updated>2025-09-12T00:00:00+00:00</updated><id>/2025/09/12/jbossws-734-release</id><content type="html" xml:base="/2025/09/12/jbossws-734-release/"><![CDATA[<p>JBossWS-CXF 7.3.4.Final has been released. In this bugfix release we improved ports caching mechanism and upgraded Apache CXF to 4.0.9 version.
For complete issue list, please check the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12460152">Release Notes</a>.</p>

<p>Please try out this release, and let us know if you have any issues or questions.</p>]]></content><author><name>Richard Opalka</name></author><summary type="html"><![CDATA[JBossWS-CXF 7.3.4.Final has been released. In this bugfix release we improved ports caching mechanism and upgraded Apache CXF to 4.0.9 version. For complete issue list, please check the Release Notes.]]></summary></entry><entry><title type="html">JBossWS 7.3.3.Final is released!</title><link href="/2025/05/14/jbossws-733-release/" rel="alternate" type="text/html" title="JBossWS 7.3.3.Final is released!" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>/2025/05/14/jbossws-733-release</id><content type="html" xml:base="/2025/05/14/jbossws-733-release/"><![CDATA[<p>JBossWS-CXF 7.3.3.Final has been released. In this bugfix release we implemented missing bits of issue: <a href="https://issues.redhat.com/browse/JBWS-4444">JBWS-4444 Sever throws IllegalStateException when accessing CDI beans from soap handlers</a>
to improve user experience. For complete issue list, please check the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12457853">Release Notes</a>.</p>

<p>Please try out this release, and let us know if you have any issues or questions.</p>]]></content><author><name>Richard Opalka</name></author><summary type="html"><![CDATA[JBossWS-CXF 7.3.3.Final has been released. In this bugfix release we implemented missing bits of issue: JBWS-4444 Sever throws IllegalStateException when accessing CDI beans from soap handlers to improve user experience. For complete issue list, please check the Release Notes.]]></summary></entry><entry><title type="html">JBossWS 7.3.2.Final is released!</title><link href="/2025/05/05/jbossws-732-release/" rel="alternate" type="text/html" title="JBossWS 7.3.2.Final is released!" /><published>2025-05-05T00:00:00+00:00</published><updated>2025-05-05T00:00:00+00:00</updated><id>/2025/05/05/jbossws-732-release</id><content type="html" xml:base="/2025/05/05/jbossws-732-release/"><![CDATA[<p>JBossWS-CXF 7.3.2.Final has been released. In this bugfix release we addressed issue: <a href="https://issues.redhat.com/browse/JBWS-4444">JBWS-4444 Sever throws IllegalStateException when accessing CDI beans from soap handlers</a>
to improve user experience. For complete issue list, please check the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12451253">Release Notes</a>.</p>

<p>Please try out this release, and let us know if you have any issues or questions.</p>]]></content><author><name>Richard Opalka</name></author><summary type="html"><![CDATA[JBossWS-CXF 7.3.2.Final has been released. In this bugfix release we addressed issue: JBWS-4444 Sever throws IllegalStateException when accessing CDI beans from soap handlers to improve user experience. For complete issue list, please check the Release Notes.]]></summary></entry><entry><title type="html">JBossWS 7.3.1.Final is released!</title><link href="/2024/12/11/jbossws-731-release/" rel="alternate" type="text/html" title="JBossWS 7.3.1.Final is released!" /><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>/2024/12/11/jbossws-731-release</id><content type="html" xml:base="/2024/12/11/jbossws-731-release/"><![CDATA[<p>JBossWS-CXF 7.3.1.Final has been released. In this release, we mainly fixed issue: <a href="https://issues.redhat.com/browse/JBWS-4433">JBWS-4433:Don’t create JAXPDelegateClassLoader for each invocation in the CXFServletExt</a>
to improve the performance. For complete issue list, please check the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12439419">Release Notes</a>.</p>

<p>Please try out this release, and let us know if you have any issues or questions.</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[JBossWS-CXF 7.3.1.Final has been released. In this release, we mainly fixed issue: JBWS-4433:Don’t create JAXPDelegateClassLoader for each invocation in the CXFServletExt to improve the performance. For complete issue list, please check the Release Notes.]]></summary></entry><entry><title type="html">JBossWS 7.3.0.Final is released!</title><link href="/2024/11/11/jbossws-730-release/" rel="alternate" type="text/html" title="JBossWS 7.3.0.Final is released!" /><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>/2024/11/11/jbossws-730-release</id><content type="html" xml:base="/2024/11/11/jbossws-730-release/"><![CDATA[<p>We are pleased to announce the release of JBossWS-CXF 7.3.0.Final. In this release,
we’ve upgraded CXF to version 4.0.5, woodstox-core from 6.4.0 to 7.0.0 and addressed several important issues, including
<a href="https://issues.redhat.com/browse/JBWS-4430">JBWS-4430</a>. For more details,
please see the <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12431262">Release Notes</a>.</p>

<p>If you are currently using JBossWS 7.2.0.Final, we recommend upgrading to this version,
especially if you are using CDI in the SOAP handler or CXF interceptors.</p>

<p>Please try out this release, and let us know if you have any issues or questions.</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[We are pleased to announce the release of JBossWS-CXF 7.3.0.Final. In this release, we’ve upgraded CXF to version 4.0.5, woodstox-core from 6.4.0 to 7.0.0 and addressed several important issues, including JBWS-4430. For more details, please see the Release Notes.]]></summary></entry><entry><title type="html">JBossWS 7.2.0.Final is released!</title><link href="/2024/08/08/jbossws-720-release/" rel="alternate" type="text/html" title="JBossWS 7.2.0.Final is released!" /><published>2024-08-08T00:00:00+00:00</published><updated>2024-08-08T00:00:00+00:00</updated><id>/2024/08/08/jbossws-720-release</id><content type="html" xml:base="/2024/08/08/jbossws-720-release/"><![CDATA[<p>JBossWS-CXF 7.2.0.Final has been released. In this release, we introduced the throttling feature to better control the number of requests a backend service can handle within a specified 
time frame. In addition to this new feature, we addressed several other issues, including a performance problem on the client side
<a href="https://issues.redhat.com/browse/JBWS-4424">JBWS-4424</a> and made a few enhancements.  For more detailed information and a full list of issues addressed in this release,
please check <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12425135">release notes</a>.</p>

<p>Please try this release out and give us your feedback!</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[JBossWS-CXF 7.2.0.Final has been released. In this release, we introduced the throttling feature to better control the number of requests a backend service can handle within a specified time frame. In addition to this new feature, we addressed several other issues, including a performance problem on the client side JBWS-4424 and made a few enhancements. For more detailed information and a full list of issues addressed in this release, please check release notes.]]></summary></entry><entry><title type="html">Throttle the webservice request with JBossWSThrottlingFeature</title><link href="/2024/05/31/new-throttling-feature/" rel="alternate" type="text/html" title="Throttle the webservice request with JBossWSThrottlingFeature" /><published>2024-05-31T00:00:00+00:00</published><updated>2024-05-31T00:00:00+00:00</updated><id>/2024/05/31/new-throttling-feature</id><content type="html" xml:base="/2024/05/31/new-throttling-feature/"><![CDATA[<p>To ensure the web service application can handle a large number of requests, we need to allocate 
sufficient resources and use load balancing approaches to distribute the requests
across different server instances. Besides providing enough resources for the web service 
application, we can still do more within the application server to help manage and control 
the flow of requests to the backend web services, ensuring the stability and performance of 
a certain web service application. In this blog, we will explore the newly added JBossWSThrottlingFeature 
and demonstrate this feature to limit web service requests with some configuration examples.</p>

<h3 id="understanding-throttling">Understanding Throttling</h3>
<p>Throttling is a technique to control the number of requests a backend service can handle within 
a specified time frame. For example, we can set a limit so that the service can only handle 
10,000 requests in 5 minutes. By limiting the rate of incoming requests, throttling helps prevent 
the server from being overwhelmed and protects it from potential crashes. This ensures that 
server resources are utilized within their designed capacity. Throttling is particularly 
important in environments where services are exposed to numerous clients and handle resource-intensive operations. 
It also acts as a protective measure against Denial of Service (DoS) attacks.</p>
<h3 id="jbosswsthrottlingfeature">JBossWSThrottlingFeature</h3>
<p>JBossWSThrottlingFeature is the new feature class to enable the throttling in JBossWS-CXF/WildFly which is introduced 
in jbossws-cxf-7.2.0. This class can allow the JBossWSThrottlingFeature to be configured in the jaxws-endpoint-config.xml.
Like CXF’s throttling feature, each JBossWSThrottlingFeature needs a ThrottlingManager to check if the request reaches the 
limit and should return the response immediately. The EndpointMetricsThrottlingManager is created to throttle the request 
based on JBossWS endpoint metrics. JBossWS EndpointMetrics collects the different metrics from each endpoint:</p>

<ul>
  <li>faultCount</li>
  <li>requestCount</li>
  <li>averageProcessingTime</li>
  <li>maxProcessingTime</li>
  <li>minProcessingTime</li>
  <li>totalProcessingTime</li>
</ul>

<p>User can define the limit number for each metric to limit the request to this endpoint.For example, if we define
the requests number reaches 5, it will throttle the request and return 429 (Server Busy) response to the client.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;jaxws-config xmlns="urn:jboss:jbossws-jaxws-config:4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:javaee="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="urn:jboss:jbossws-jaxws-config:4.0 schema/jbossws-jaxws-config_4_0.xsd"&gt;

  &lt;endpoint-config&gt;
    &lt;config-name&gt;org.jboss.test.ws.jaxws.cxf.throttling.HelloWorldImpl&lt;/config-name&gt;
    &lt;property&gt;
      &lt;property-name&gt;cxf.features&lt;/property-name&gt;
      &lt;property-value&gt;##throttlingFeature&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingFeature&lt;/property-name&gt;
      &lt;property-value&gt;org.jboss.wsf.stack.cxf.features.throttling.JBossWSThrottlingFeature&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingFeature.throttlingManager&lt;/property-name&gt;
      &lt;property-value&gt;##throttlingManager&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingManager&lt;/property-name&gt;
      &lt;property-value&gt;org.jboss.wsf.stack.cxf.features.throttling.EndpointMetricsThrottlingManager&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingManager.requestPermit&lt;/property-name&gt;
      &lt;property-value&gt;5&lt;/property-value&gt;
    &lt;/property&gt;
  &lt;/endpoint-config&gt;
</code></pre></div></div>
<p>There is another RateLimitThorttlingManager out-of-the-box to allow user to easily control the request traffic
by defining the <code class="language-plaintext highlighter-rouge">permitsPerMin</code>. This simply define the number of requests the server can handle in one minute.
Exceed this number of requests, the server will respond 429 immediately.Below is the configuration example which is
limiting the requests is 5 in one minute:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;jaxws-config xmlns="urn:jboss:jbossws-jaxws-config:4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:javaee="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="urn:jboss:jbossws-jaxws-config:4.0 schema/jbossws-jaxws-config_4_0.xsd"&gt;
  &lt;endpoint-config&gt;
    &lt;config-name&gt;org.jboss.test.ws.jaxws.cxf.throttling.HelloImpl&lt;/config-name&gt;
    &lt;property&gt;
      &lt;property-name&gt;cxf.features&lt;/property-name&gt;
      &lt;property-value&gt;##throttlingFeature&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingFeature&lt;/property-name&gt;
      &lt;property-value&gt;org.jboss.wsf.stack.cxf.features.throttling.JBossWSThrottlingFeature&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingFeature.throttlingManager&lt;/property-name&gt;
      &lt;property-value&gt;##throttlingManager&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingManager&lt;/property-name&gt;
      &lt;property-value&gt;org.jboss.wsf.stack.cxf.features.throttling.RateLimitThorttlingManager&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingManager.permitsPerMin&lt;/property-name&gt;
      &lt;property-value&gt;5&lt;/property-value&gt;
    &lt;/property&gt;
  &lt;/endpoint-config&gt;
&lt;/jaxws-config&gt;
</code></pre></div></div>
<p>The other two options <code class="language-plaintext highlighter-rouge">peroid</code> and <code class="language-plaintext highlighter-rouge">permitsPerPeroid</code> in RateLimitThorttlingManager can be used to specify any peroid time and number of requests is allowed in this peroid 
time instead of defining the requests limit in one minute which is commonly used. For example, this jaxws-endpoint-config.xml can be used to limit the 5 requests in 30 seconds:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jaxws-config xmlns="urn:jboss:jbossws-jaxws-config:4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:javaee="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="urn:jboss:jbossws-jaxws-config:4.0 schema/jbossws-jaxws-config_4_0.xsd"&gt;
  &lt;endpoint-config&gt;
    &lt;config-name&gt;org.jboss.test.ws.jaxws.cxf.throttling.HelloImpl&lt;/config-name&gt;
    &lt;property&gt;
      &lt;property-name&gt;cxf.features&lt;/property-name&gt;
      &lt;property-value&gt;##throttlingFeature&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingFeature&lt;/property-name&gt;
      &lt;property-value&gt;org.jboss.wsf.stack.cxf.features.throttling.JBossWSThrottlingFeature&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingFeature.throttlingManager&lt;/property-name&gt;
      &lt;property-value&gt;##throttlingManager&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingManager&lt;/property-name&gt;
      &lt;property-value&gt;org.jboss.wsf.stack.cxf.features.throttling.RateLimitThorttlingManager&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingManager.period&lt;/property-name&gt;
      &lt;property-value&gt;30&lt;/property-value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;property-name&gt;##throttlingManager.permitsPerPeriod&lt;/property-name&gt;
      &lt;property-value&gt;5&lt;/property-value&gt;
    &lt;/property&gt;
  &lt;/endpoint-config&gt;
&lt;/jaxws-config&gt;
</code></pre></div></div>
<p>Please note ,both these two ThrottlingManagers require the webservice subsystem’ statistics is enabled
to get the correct value from Endpoint metrics. To enable the webservice subsystem’s statistics, simply 
run the jboss-cli command:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./subsystem=webservices:write-attribute(name=statistics-enabled,value=true)
</code></pre></div></div>

<p>The key element of the throttling feature configuration is the jaxws-endpoint-config.xml, and this configuration file should be packaged directly in the WAR file, and ensure it’s not under META-INF or WEB-INF.</p>

<h3 id="summary">Summary</h3>
<p>The JBossWS throttling feature can be an easy approach to protect important web services from being 
overwhelmed or crashed. This feature can also be used to serve different user categories, 
such as paid and unpaid users. If you need this feature in your web service application, 
please give it a try. If you find that the out-of-the-box ThrottlingManager 
doesn’t meet your requirements, you can extend the throttling api and create 
your own ThrottlingManager. If your created ThrottlingManager could be useful 
for others and want to contribute, don’t forget to let us know.</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[To ensure the web service application can handle a large number of requests, we need to allocate sufficient resources and use load balancing approaches to distribute the requests across different server instances. Besides providing enough resources for the web service application, we can still do more within the application server to help manage and control the flow of requests to the backend web services, ensuring the stability and performance of a certain web service application. In this blog, we will explore the newly added JBossWSThrottlingFeature and demonstrate this feature to limit web service requests with some configuration examples.]]></summary></entry><entry><title type="html">JBossWS 7.1.0.Final is released!</title><link href="/2024/03/27/jbossws-710-released/" rel="alternate" type="text/html" title="JBossWS 7.1.0.Final is released!" /><published>2024-03-27T00:00:00+00:00</published><updated>2024-03-27T00:00:00+00:00</updated><id>/2024/03/27/jbossws-710-released</id><content type="html" xml:base="/2024/03/27/jbossws-710-released/"><![CDATA[<p>JBossWS-CXF 7.1.0.Final has been released. This release contains several bug fixes, test enhancements and components upgrades.
The notable upgrades are the CXF 4.0.4 upgrade which resolved <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28752">CVE-2024-28752</a>
and XmlSec(santuario) 3.0.3 upgrade resolved <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44483">CVE-2023-44483</a>. The CXF upgrade introduced the new CXF http client which is using java.net.http.HttpClient 
from JDK to better support HTTP/2, but this is the preview feature and user can enable this new client by setting system property or bus property.
From 7.1.0.Final,we started to use Java 21 to build and run testsuite to make sure everything works with this latest version JDK.</p>

<p>For more detailed info and full list of issue in this release, please check <a href="https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12310050&amp;version=12414901">release notes</a>.
Please try this release out and give us your feedback!</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[JBossWS-CXF 7.1.0.Final has been released. This release contains several bug fixes, test enhancements and components upgrades. The notable upgrades are the CXF 4.0.4 upgrade which resolved CVE-2024-28752 and XmlSec(santuario) 3.0.3 upgrade resolved CVE-2023-44483. The CXF upgrade introduced the new CXF http client which is using java.net.http.HttpClient from JDK to better support HTTP/2, but this is the preview feature and user can enable this new client by setting system property or bus property. From 7.1.0.Final,we started to use Java 21 to build and run testsuite to make sure everything works with this latest version JDK.]]></summary></entry><entry><title type="html">The new webserivce http client in jbossws-cxf-7.1.0.Final</title><link href="/2024/03/27/new-webservice-client/" rel="alternate" type="text/html" title="The new webserivce http client in jbossws-cxf-7.1.0.Final" /><published>2024-03-27T00:00:00+00:00</published><updated>2024-03-27T00:00:00+00:00</updated><id>/2024/03/27/new-webservice-client</id><content type="html" xml:base="/2024/03/27/new-webservice-client/"><![CDATA[<p>From jbossws-cxf-7.1.0.Final, we upgraded the CXF to 4.0.4. With this CXF upgrade, 
the new webservice client is included in jbossws-cxf-7.1.0.Final and WFLY 32.0.0.Beta1.
This new CXF webservice client is going to replace the old webservice http client which is 
using URLConnection with the new java.net.http.HttpClient. This new CXF http client mainly brings the HTTP/2 
support without other dependency, and user doesn’t need to set anything else if server supports HTTP/2.
Due to some important issues like the <a href="https://issues.apache.org/jira/browse/CXF-8951">massive threads created</a> and 
<a href="https://bugs.openjdk.org/browse/JDK-8277519">performance issue</a> in this new http client, 
jbossws-cxf disable this new webserivce http client by default and still switch to the old http client based on HTTPURLConnection.
To enable this new webservice client, user should explicitly set the <code class="language-plaintext highlighter-rouge">force.urlconnection.http.conduit</code> to <code class="language-plaintext highlighter-rouge">false</code> 
in system property or bus property like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> BusFactory.getDefaultBus().setProperty("force.urlconnection.http.conduit", false);
 BusFactory.getDefaultBus().setProperty("org.apache.cxf.transport.http.forceVersion", "2");
 HelloWorld port = getPort();
 String response = port.echo("hello");
</code></pre></div></div>

<p>Due to this isn’t mature and possibly more issues will be found by the community user.
It isn’t recommended to use this in production unless performance isn’t a factor and HTTP/2 is required to support.</p>]]></content><author><name>Jim Ma</name></author><summary type="html"><![CDATA[From jbossws-cxf-7.1.0.Final, we upgraded the CXF to 4.0.4. With this CXF upgrade, the new webservice client is included in jbossws-cxf-7.1.0.Final and WFLY 32.0.0.Beta1. This new CXF webservice client is going to replace the old webservice http client which is using URLConnection with the new java.net.http.HttpClient. This new CXF http client mainly brings the HTTP/2 support without other dependency, and user doesn’t need to set anything else if server supports HTTP/2. Due to some important issues like the massive threads created and performance issue in this new http client, jbossws-cxf disable this new webserivce http client by default and still switch to the old http client based on HTTPURLConnection. To enable this new webservice client, user should explicitly set the force.urlconnection.http.conduit to false in system property or bus property like:]]></summary></entry></feed>